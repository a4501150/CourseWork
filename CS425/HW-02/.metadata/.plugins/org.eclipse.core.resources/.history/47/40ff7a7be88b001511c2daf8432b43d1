import java.sql.*;
import java.util.ArrayList;
import java.util.Vector;

public class q4 {

    Statement stmt = null;
    ResultSet result = null;
	Connection con = null;
    static ArrayList<q4staff> staffs;
	
	public q4(Connection con) throws SQLException {
		
		System.out.println("\n now working on question 4\n"
				+ "now will display the current staffs in all locations or still needs to assign\n");
		
		this.con = con;
		
		q4.staffs = new ArrayList<q4staff>();
		
		viewWorkers();
		
	}
	
	public void viewWorkers() throws SQLException{
		
		String sql = "select name,id from staff";
	    stmt = con.createStatement();
	    result = stmt.executeQuery(sql);
	        	   
	    while(result.next()) {
	    	
	      String name = result.getString("NAME");
	      int id = result.getInt("id");
	      
	      staffs.add(new q4staff(name,id));
	      
	      
	    
	    }
	
	}
	
	public void setTime() {
		
	}
	
	class q4staff {
		
		String name;
		
		Vector<Integer> WorkTimeSchduleId;  
		
		Vector<String> locs, startTimes, endTimes;
		
		int id;
		
		q4staff (String a, int id) throws SQLException {
			
			this.name = a;
			this.id = id;
			WorkTimeSchduleId = getWorkTimeID(); 
			
			startTimes = getStartTime();
			endTimes = getEndTime();
			locs = getLocation();
			
			showInfo();
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			q4Menu();
			
		}
		
		private void q4Menu() {
			
			
			System.out.println("What do u wanna do now? say: \n  "
					+ "S  ------- show Info about schedule ---- "
					+ "A  ------- assign work for staffs ------"
					+ "m  ------- modify the locs or time schedules for current staffs------ ");
			
		}

		Vector<Integer> getWorkTimeID() throws SQLException {
			
			String sql = "select workerid from schedule where workerID =?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, Integer.toString(id));
			ResultSet rs = pstmt.executeQuery(); 
			
			Vector<Integer> wt = new Vector<Integer>();
			
			while (rs.next()) {
				wt.add(rs.getInt(1));
			}
			
			return wt;
			
		}
		
		void showInfo () {
			
			if(startTimes.isEmpty()) System.out.println("Name: "+ name + " Needs to assign");
			
			if(startTimes.size()==1&&locs.size()==1) {			
				System.out.println("\nName: "+ name +
					   " startTime" + startTimes.get(0)
					   + " "+ "endTime: " + endTimes.get(0) +" "+ "location: "+locs.get(0));
			}
			
			if (startTimes.size()>1)
			
			for (int i=0; i<startTimes.size(); i ++) {
			System.out.println("\nName: "+ name +
							   " startTime" + startTimes.get(i)
							   + " "+ "endTime: " + endTimes.get(i) +" "+ "location: "+locs.get(i));
			}
		}

		private Vector<String> getEndTime() {
			
			endTimes = new Vector<String>();
			
			try {
			String sql = "select ENDTIME from schedule where workerID =?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, Integer.toString(id));
			ResultSet rs = pstmt.executeQuery(); 
			
			while(rs.next()) {
				endTimes.add(rs.getString("ENDTIME"));
			}
			
			rs.close();
			return endTimes;
			
			} catch (Exception e) {
				e.getMessage();
			}
			return endTimes;
			

		}

		private Vector<String> getLocation() {
			
			Vector<Integer> locsID = new Vector<Integer> ();
			locs = new Vector<String> ();
			
			try {
			String sql = "select theatreID from schedule where workerID =?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, Integer.toString(id));
			ResultSet rs = pstmt.executeQuery(); 
			
			while(rs.next()) {
				locsID.add(rs.getInt("theatreID"));
			}
			
			rs.close();
			
			
			} catch (Exception e) {
				e.getMessage();
			}
			
			try {
				
				for (int i=0; i<locsID.size();i++) {
					
				String sql = "select location from theatre where id =?";
				PreparedStatement pstmt = con.prepareStatement(sql);
				pstmt.setString(1, Integer.toString(locsID.get(i)));
				ResultSet rs = pstmt.executeQuery(); 
				
				while(rs.next()) {
					locs.add(rs.getString("location"));
				}
				
				return locs;
				
				}
				
			} catch (Exception e) {
				e.getMessage();
			}
			return locs;
			
		}

		private Vector<String> getStartTime() {
			
			startTimes = new Vector<String>();
			
			try {
			String sql = "select STARTTIME from schedule where workerID =?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, Integer.toString(id));
			ResultSet rs = pstmt.executeQuery(); 
			
			while(rs.next()) {
				startTimes.add(rs.getString("STARTTIME"));
			}
			
			rs.close();
			return startTimes;
			
			} catch (Exception e) {
				e.getMessage();
			}
			return endTimes;
			
		}
		
		
		
		
	}
}
