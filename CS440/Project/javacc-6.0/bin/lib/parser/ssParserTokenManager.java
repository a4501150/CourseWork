/* ssParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ssParserTokenManager.java */
package parser;
import java.io.*;
import ast.*;

/** Token Manager. */
@SuppressWarnings("unused")public class ssParserTokenManager implements ssParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000000000140L) != 0L || (active1 & 0x800L) != 0L)
            return 2;
         if ((active0 & 0x1ffffe00000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 41;
            return 33;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x80000000L) != 0L)
            return 33;
         if ((active0 & 0x1ff7fe00000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
            return 33;
         }
         return -1;
      case 2:
         if ((active0 & 0x1ef77e00000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
            return 33;
         }
         if ((active0 & 0x1008000000L) != 0L)
            return 33;
         return -1;
      case 3:
         if ((active0 & 0x14956e00000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
            return 33;
         }
         if ((active0 & 0xa621000000L) != 0L)
            return 33;
         return -1;
      case 4:
         if ((active0 & 0x900200000L) != 0L)
            return 33;
         if ((active0 & 0x14056c00000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
            return 33;
         }
         return -1;
      case 5:
         if ((active0 & 0x44000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 5;
            return 33;
         }
         if ((active0 & 0x14012c00000L) != 0L)
            return 33;
         return -1;
      case 6:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x44000000L) != 0L)
            return 33;
         return -1;
      case 7:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 37:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 45);
      case 41:
         return jjStopAtPos(0, 48);
      case 42:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 51);
      case 45:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 71);
      case 47:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x40000000000140L, 0x0L);
      case 59:
         return jjStopAtPos(0, 50);
      case 60:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x8L);
      case 61:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 62:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x10L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x1L);
      case 91:
         return jjStopAtPos(0, 46);
      case 93:
         return jjStopAtPos(0, 47);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20200000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x204000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x88000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2400000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 44);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 49);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 60:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8800000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x15000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 33);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2120000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x51000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20a00000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa101000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x1L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x410000000L, active1, 0L);
      case 119:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(3, 60);
         break;
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 33);
         break;
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x140400000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 33);
         break;
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 33);
         break;
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x800200000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 33);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L);
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 33);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 33);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 33);
         break;
      case 103:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 33);
         break;
      case 104:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 33);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 33);
         break;
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa9_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa10_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa11_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa12_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa16_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_0(active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(17, 64);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 38;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(7, 8); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 39)
                     { jjAddStates(3, 4); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddTwoStates(5, 6); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAddStates(5, 7); }
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 8:
                  if (curChar != 46)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddStates(8, 10); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddStates(8, 10); }
                  break;
               case 11:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 14:
                  if (curChar == 39)
                     { jjAddStates(3, 4); }
                  break;
               case 15:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if (curChar == 39 && kind > 19)
                     kind = 19;
                  break;
               case 18:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 16); }
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 21:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(20); }
                  break;
               case 23:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 24:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 27:
                  if (curChar == 34 && kind > 20)
                     kind = 20;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 14); }
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 30:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(29); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 34:
                  if (curChar != 48)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddStates(5, 7); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(36, 6); }
                  break;
               case 37:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(37, 6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(33); }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               case 13:
                  if ((0x5000000050L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 17:
                  if (curChar == 92)
                     { jjAddStates(17, 19); }
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 25:
                  if (curChar == 92)
                     { jjAddStates(20, 22); }
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 35:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(36); }
                  break;
               case 36:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddTwoStates(36, 6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   24, 25, 27, 15, 17, 35, 37, 6, 9, 10, 13, 24, 25, 29, 27, 11, 
   12, 18, 19, 21, 26, 28, 30, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\143\154\141\163\163", 
"\160\165\142\154\151\143", "\163\164\141\164\151\143", "\166\157\151\144", "\123\164\162\151\156\147", 
"\145\170\164\145\156\144\163", "\151\156\164", "\144\157\165\142\154\145", "\143\150\141\162", 
"\142\157\157\154\145\141\156", "\151\146", "\167\150\151\154\145", "\145\154\163\145", "\164\162\165\145", 
"\146\141\154\163\145", "\156\145\167", "\164\150\151\163", "\162\145\164\165\162\156", 
"\155\141\151\156", "\154\145\156\147\164\150", null, null, null, "\173", "\50", "\133", "\135", 
"\51", "\175", "\73", "\54", "\75", "\52\75", "\57\75", "\45\75", "\53\75", "\55\75", 
"\74\74\75", "\76\76\75", "\76\76\76\75", "\46\75", "\136\75", "\174\75", 
"\123\171\163\164\145\155\56\157\165\164\56\160\162\151\156\164\154\156", "\74", "\76", "\74\75", "\76\75", "\75\75", "\41\75", "\56", "\53", "\55", 
"\52", "\57", "\45", "\41", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ssParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ssParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 38; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffff3fffffa2001L, 0x3fffL, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[38];
    private final int[] jjstateSet = new int[2 * 38];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
